import 'dart:convert';
import 'package:http/http.dart' as http;

class TermService {
  static const _baseUrl = 'https://openrouter.ai/api/v1/chat/completions';
  static const _apiKey =
      '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'; // üîê –≤—Å—Ç–∞–≤—å —Å–≤–æ–π API-–∫–ª—é—á —Å—é–¥–∞

static Future<Map<String, List<String>>> searchTerms(String prompt) 
async {
    final headers = {
      'Authorization': 'Bearer $_apiKey',
      'Content-Type': 'application/json',
      'HTTP-Referer': 'https://yourapp.example.com', // –∑–∞–º–µ–Ω–∏—à—å –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      'X-Title': 'ProTermFinder',
    };

    final body = jsonEncode({
      'model': 'openai/gpt-3.5-turbo',
      'messages': [
        {
          'role': 'user',
          'content':
              """
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–º –≤ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∑–∞–ø—Ä–æ—Å: "$prompt"

–û—Ç–≤–µ—Ç—å, –≤ –∫–∞–∫–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ–±–ª–∞—Å—Ç–∏:
- –ù–∞–∑–æ–≤–∏ –æ–±–ª–∞—Å—Ç—å
- –û–±—ä—è—Å–Ω–∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ —ç—Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —Å–ª–æ–≤–æ "—Ç–µ—Ä–º–∏–Ω"
- –°–¥–µ–ª–∞–π –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–≤—è–∑–Ω—ã–º –∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–º
- –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ –≤ JSON-–º–∞—Å—Å–∏–≤–µ, –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –ø–æ–ª—è "area" –∏ "explanation"

–ü—Ä–∏–º–µ—Ä:
[
  {
    "area": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "explanation": "–í –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã–¥–µ–ª—è—é—Ç —á–µ—Ç—ã—Ä–µ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞: –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è, –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –∏ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è. –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–∏–±–∫–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
  },
  {
    "area": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
    "explanation": "–ü—Ä–∏–Ω—Ü–∏–ø—ã –û–û–ü –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å–∏—Å—Ç–µ–º, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."
  }
]
""",
        }
      ],
    });

    final response = await http.post(
      Uri.parse(_baseUrl),
      headers: headers,
      body: body,
    );

    if (response.statusCode == 200) {
      final decodedBody = utf8.decode(response.bodyBytes);
      final data = jsonDecode(decodedBody);
      final content = data['choices'][0]['message']['content'];
      try {
       final decoded = jsonDecode(content);

      final Map<String, List<String>> result = {};

      for (final item in decoded) {
        final area = item['area'] as String;
        final explanation = item['explanation'] as String;

        result.putIfAbsent(area, () => []);
        result[area]!.add(explanation);
      }

      return result;
      } catch (e) {
        throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: ${e.toString()}');
      }
    } else {
      throw Exception(
          '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${response.statusCode} ${response.body}');
    }
  }
}
